{
	"name": "scd4df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_scd4",
						"type": "DatasetReference"
					},
					"name": "scd4delta"
				},
				{
					"dataset": {
						"referenceName": "ds_s4tab",
						"type": "DatasetReference"
					},
					"name": "s4tab"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_s4tab",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "exists1"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> scd4delta",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> s4tab",
				"scd4delta derive(id = toInteger(id)) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
				"s4tab derive(s4tabhash = md5(id,name,location)) ~> derivedColumn2",
				"scd4delta derive(sourcehash = md5(id,name,location)) ~> derivedColumn3",
				"derivedColumn2, derivedColumn3 exists(s4tabhash == sourcehash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 keyGenerate(output(skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          location as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          skey as integer,",
				"          id as integer,",
				"          name as string,",
				"          location as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id,",
				"          skey,",
				"          name,",
				"          location",
				"     )) ~> sink2"
			]
		}
	}
}